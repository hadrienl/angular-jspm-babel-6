{"version":3,"sources":["config/decorators/decorators-router.js"],"names":[],"mappings":"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","file":"config/decorators/decorators-router.js","sourcesContent":["import {DecoratorsModule} from './decorators-module';\nimport {directive, getTargetName} from './decorators-angular';\n\n/**\n * Specify a state route\n * @state('app.foo', {\n *   url: '/foo',\n *   template: `<p>Hello World</p>`,\n *   templateUrl: 'url.html',\n *   resolve: {\n *     bar: (Service) => Service.getSomething()\n *   }\n * })\n * class MyController {\n *   constructor () {\n *     // this.bar is set \\o/\n *   }\n *  }\n */\nexport function state (stateName, opts = {}) {\n  return function decorate (Target) {\n    let inject = Target.$inject || [];\n    if (opts.resolve) {\n      for (let service of Object.keys(opts.resolve)) {\n        inject.push(service);\n      }\n    }\n\n    DecoratorsModule.config($stateProvider => {\n      $stateProvider.state(stateName, {\n        url: opts.url,\n        template: opts.template,\n        templateUrl: opts.templateUrl,\n        resolve: opts.resolve,\n        controller: [...inject, function (...deps) {\n          let controller = new Target(...deps);\n          if (opts.resolve) {\n            for (let service of Object.keys(opts.resolve)) {\n              controller[service] = deps[inject.indexOf(service)];\n            }\n          }\n          return controller;\n        }],\n        controllerAs: 'ctrl'\n      });\n    });\n  };\n}\n\n/**\n * Specify a component which would be displayed on a state route\n * @component('app.foo', {\n *  url: '/foo',\n *  resolve: {\n *    bar: () => 'bar'\n *  },\n *  templateUrl: 'path/to/foo.html',\n *  // template: '<p>{{ ctrl.bar }}</p>'\n *  scope: {\n *    bar: '='\n *  }\n * })\n * class MyDirective {\n *  link () {\n *    // this.bar === 'bar'\n *  }\n * }\n */\nexport function component (stateName, opts = {}) {\n  return function decorate (Target) {\n    let tag = classNameToDirective(getTargetName(Target)),\n      template = `<${tag}${insertResolves(opts.resolve)}></${tag}>`;\n\n    state(stateName, {\n      url: opts.url,\n      template: template,\n      resolve: opts.resolve\n    })(() => {});\n\n    if (opts.resolve) {\n      for (let service of Object.keys(opts.resolve)) {\n        if (!opts.scope) {\n          opts.scope = {};\n        }\n        if (!opts.scope[service]) {\n          opts.scope[service] = '=';\n        }\n      }\n    }\n\n    directive(opts)(Target);\n  };\n}\n\nfunction classNameToDirective (str) {\n  return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n}\n\nfunction insertResolves (resolves) {\n  let output = '';\n\n  if (resolves) {\n    for (let key of Object.keys(resolves)) {\n      output += ` ${key}=\"ctrl.${key}\"`;\n    }\n  }\n\n  return output;\n}\n"],"sourceRoot":"/source/"}