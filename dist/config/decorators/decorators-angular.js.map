{"version":3,"sources":["config/decorators/decorators-angular.js"],"names":[],"mappings":"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","file":"config/decorators/decorators-angular.js","sourcesContent":["import {DecoratorsModule} from './decorators-module';\n\n/**\n * @exemple\n *  import {inject} from './decorators';\n *\n *  @inject('$scope', '$http')\n *  class MyController {\n *    constructor($scope, $http) {\n *      this.$scope = $scope;\n *      this.$http = $http;\n *    }\n *  }\n *\n *  class MyOtherController {\n *    @inject $http = null;\n *    @inject MyService = null;\n *    doSomething () {\n *      this.MyService.doServiceTask();\n *    }\n *  }\n */\nexport function inject (...components) {\n  if (typeof components[0] === 'object') {\n    let key = components[1];\n\n    return {\n        get: () => {\n          try {\n            return DecoratorsModule.$injector.get(key);\n          } catch (err) {\n            throw new Error(`${key} cannot be injected as a property. Inject it in the class level.`);\n          }\n        }\n      };\n  } else {\n    return function decorate (target, key, property) {\n      target.$inject = components;\n    };\n  }\n}\n\n/**\n * @exemple\n *  import {injectAs} from './decorators';\n *\n *  class MyController {\n *    @injectAs('MyService') service = null;\n *    constructor() {\n *      this.service.doSomething();\n *    }\n *  }\n */\nexport function injectAs (dep) {\n  return function decorate (target, key, descriptor) {\n    return {\n        get: () => {\n          try {\n            return DecoratorsModule.$injector.get(dep);\n          } catch (err) {\n            throw new Error(`${key} cannot be injected as a property. Inject it in the class level.`);\n          }\n        }\n      };\n  };\n}\n\n/**\n * @exemple\n *  import {directive, inject} from './decorators';\n *  import {baseUrl} from './constants';\n *\n *  @directive({\n *    priority: 42,\n *    templateUrl: `${baseUrl}/components/myComponent/myView.html`,\n *    restrict: 'E',\n *    require: '^parentDirective',\n *    // etc\n *  })\n *  @inject('$scope', '$element', '$attrs')\n *  class MyView {\n *    constructor($scope, $element, '$attrs') {\n *      $element.on('click', e => console.log('click'));\n *    }\n *\n *    // If you want to use link function :\n *    static link (scope, element, attrs) {\n *      element.on('click', e => console.log('click'));\n *    }\n *  }\n */\nexport function directive (opts = {}) {\n  return function decorate (Target) {\n    let name = opts.name || getTargetName(Target);\n    name = name.substring(0,1).toLowerCase() + name.substring(1);\n    function factory(...deps) {\n      let inject = Target.$inject || [],\n        controller;\n      let directiveDefinitionObject = {\n        priority: opts.priority,\n        template: opts.template,\n        templateUrl: opts.templateUrl,\n        transclude: opts.transclude,\n        restrict: opts.restrict,\n        templateNamespace: opts.templateNamespace,\n        scope: opts.scope,\n        controller: [...inject, function (...deps) {\n          controller = new Target(...deps);\n          return controller;\n        }],\n        controllerAs: opts.scope ? opts.controllerAs || 'ctrl' : null,\n        bindToController: true,\n        require: opts.require,\n        replace: opts.replace,\n        compile: function compile (...args) {\n          let compileFn;\n          if (Target.compile) {\n            compileFn = Target.compile(...args);\n          }\n          return function link (scope, element, attrs, requires) {\n            if (compileFn) {\n              if (controller) {\n                compileFn.call(controller, scope, element, attrs, requires);\n              } else {\n                compileFn(scope, element, attrs, requires);\n              }\n            }\n\n            if (Target.link) {\n              return Target.link(scope, element, attrs, requires);\n            }\n            if (controller) {\n              controller.$scope = scope;\n              controller.$element = element;\n              controller.$attrs = attrs;\n              controller.$requires = requires;\n              if (controller.link) {\n                return controller.link(scope, element, attrs, requires);\n              }\n            }\n          };\n        }\n      };\n      return directiveDefinitionObject;\n    }\n    DecoratorsModule.directive(name, factory);\n  };\n}\n\n\n/**\n * @exemple\n *  import {register} from './decorators';\n *\n *  @register({\n *    type: 'controller'\n *  })\n *  export class MyController {}\n */\nexport function register (opts) {\n  return function decorate(target) {\n    if(opts.inject) {\n      target.$inject = opts.inject;\n    }\n\n    let name = opts.name || getTargetName(target);\n    DecoratorsModule[opts.type](name, target);\n  };\n}\n\n/**\n * @exemple\n *  import {controller} from './decorators';\n *\n *  @controller\n *  export class MyController {}\n */\nexport function controller (target) {\n  return register({ type: 'controller' })(target);\n}\n/**\n * @exemple\n *  import {filter, inject} from './decorators';\n *\n *  @filter\n *  @inject('$http')\n *  export class MyFilter {\n *    constructor($http) {\n *      this.$http = $http;\n *    }\n *    filter (input) {\n *      return input.toUpperCase();\n *    }\n *  }\n */\nexport function filter (Target) {\n  let name = getTargetName(Target);\n  name = name.substring(0,1).toLowerCase() + name.substring(1);\n  let deps = Target.$inject || [];\n  DecoratorsModule.filter(name, [...deps, function (...deps) {\n    let instance = new Target();\n    return function (...args) { return instance.filter(...args); };\n  }]);\n}\n/**\n * @exemple\n *  import {constant} from './decorators';\n *\n *  @controller\n *  export class MyConstant {\n *    constructor(...deps) {\n *      return () => {};\n *    }\n *  }\n */\nexport function constant (Target) {\n  let name = getTargetName(Target);\n  name = name.substring(0,1).toLowerCase() + name.substring(1);\n  return register({ type: 'constant', name: name })(new Target());\n}\n/**\n * @exemple\n *  import {value} from './decorators';\n *\n *  @controller\n *  export class MyValue {\n *    constructor(...deps) {\n *      return () => {};\n *    }\n *  }\n */\nexport function value (Target) {\n  return register({ type: 'value', name: getTargetName(Target) })(new Target());\n}\n/**\n * @exemple\n *  import {factory} from './decorators';\n *\n *  @controller\n *  export class MyFactory {}\n */\nexport function factory (target) {\n  return register({ type: 'factory' })(target);\n}\n/**\n * @exemple\n *  import {service} from './decorators';\n *\n *  @controller\n *  export class MyService {}\n */\nexport function service (target) {\n  return register({ type: 'service' })(target);\n}\n/**\n * @exemple\n *  import {provider} from './decorators';\n *\n *  @controller\n *  export class Myprovider {}\n */\nexport function provider (target) {\n  let name = target.name.replace('Provider', '');\n  return register({ type: 'provider', name: name })(target);\n}\n\n\nexport function getTargetName (o) {\n  if (o.name) {\n    return o.name;\n  }\n  // IE sux\n  return o.toString().match(/function\\s?(.*)\\s?\\(/)[1];\n}\n"],"sourceRoot":"/source/"}